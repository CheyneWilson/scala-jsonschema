{"docs":[{"location":"/paradox.json","text":"","title":""},{"location":"/index.html","text":"","title":""},{"location":"/overview.html","text":"","title":"Overview ·"},{"location":"/overview.html#overview","text":"","title":"Overview"},{"location":"/overview.html#generate-json-schema-from-scala-classes","text":"The goal of this library is to make JSON Schema generation done the way all popular JSON reading/writing libraries do. Inspired by Coursera Autoschema but uses Scala Macros instead of Java Reflection.","title":"Generate JSON Schema from Scala classes"},{"location":"/overview.html#features","text":"Supports Json Schema draft-04, draft-06, draft-07 Supports value classes Supports sealed trait enums Supports sealed trait case classes Treats Option as optional fields As well as treats fields with default values as optional Any Iterable will be treated as array Pluggable Joda-Time Support Pluggable Cats Support Pluggable Refined Support Supports generic data types","title":"Features"},{"location":"/overview.html#example","text":"Suppose you have defined this data structures\nsealed trait Gender\n\nobject Gender {\n\n    case object Male extends Gender\n\n    case object Female extends Gender\n}\n\ncase class Company(name: String)\n\ncase class Car(name: String, manufacturer: Company)\n\ncase class Person(\n    firstName: String,\n    middleName: Option[String],\n    lastName: String,\n    gender: Gender,\n    birthDay: java.time.LocalDateTime,\n    company: Company,\n    cars: Seq[Car])\nNow you have several ways to specify your schema.","title":"Example"},{"location":"/overview.html#in-lined","text":"In simple words in-lined mode means you will have no definitions. Type you want to use as source for schema will be represented in json schema without reusable data blocks.\nimport json._\n\nval personSchema: json.Schema[Person] = Json.schema[Person]\nAs result you will receive this:\n{\n  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n  \"type\": \"object\",\n  \"additionalProperties\": false,\n  \"properties\": {\n    \"middleName\": {\n      \"type\": \"string\"\n    },\n    \"cars\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"additionalProperties\": false,\n        \"properties\": {\n          \"name\": {\n            \"type\": \"string\"\n          },\n          \"manufacturer\": {\n            \"type\": \"object\",\n            \"additionalProperties\": false,\n            \"properties\": {\n              \"name\": {\n                \"type\": \"string\"\n              }\n            },\n            \"required\": [\n              \"name\"\n            ]\n          }\n        },\n        \"required\": [\n          \"name\",\n          \"manufacturer\"\n        ]\n      }\n    },\n    \"company\": {\n      \"type\": \"object\",\n      \"additionalProperties\": false,\n      \"properties\": {\n        \"name\": {\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"name\"\n      ]\n    },\n    \"lastName\": {\n      \"type\": \"string\"\n    },\n    \"firstName\": {\n      \"type\": \"string\"\n    },\n    \"birthDay\": {\n      \"type\": \"string\",\n      \"format\": \"date-time\"\n    },\n    \"gender\": {\n      \"type\": \"string\",\n      \"enum\": [\n        \"Male\",\n        \"Female\"\n      ]\n    }\n  },\n  \"required\": [\n    \"company\",\n    \"lastName\",\n    \"birthDay\",\n    \"gender\",\n    \"firstName\",\n    \"cars\"\n  ]\n}","title":"In-Lined"},{"location":"/getting-started.html","text":"","title":"Getting Started ·"},{"location":"/getting-started.html#getting-started","text":"","title":"Getting Started"},{"location":"/getting-started.html#sbt","text":"","title":"SBT"},{"location":"/getting-started.html#main-","text":"libraryDependencies += \"com.github.andyglow\" %% \"scala-jsonschema\" % <version> // <-- required","title":"Main:"},{"location":"/getting-started.html#modules","text":"libraryDependencies ++= Seq(\n  \"com.github.andyglow\" %% \"scala-jsonschema-core\" % <version>,              // <-- transitive\n  \"com.github.andyglow\" %% \"scala-jsonschema-macros\" % <version> % Provided, // <-- transitive\n  // json bridge. pick one\n  \"com.github.andyglow\" %% \"scala-jsonschema-play-json\" % <version>,         // <-- optional\n  \"com.github.andyglow\" %% \"scala-jsonschema-spray-json\" % <version>,        // <-- optional\n  \"com.github.andyglow\" %% \"scala-jsonschema-circe-json\" % <version>,        // <-- optional\n  \"com.github.andyglow\" %% \"scala-jsonschema-json4s-json\" % <version>,       // <-- optional\n  \"com.github.andyglow\" %% \"scala-jsonschema-ujson\" % <version>,             // <-- optional\n  // joda-time support\n  \"com.github.andyglow\" %% \"scala-jsonschema-joda-time\" % <version>,         // <-- optional\n  // cats support\n  \"com.github.andyglow\" %% \"scala-jsonschema-cats\" % <version>,              // <-- optional\n  // refined support\n  \"com.github.andyglow\" %% \"scala-jsonschema-refined\" % <version>,           // <-- optional\n  // zero-dependency json and jsonschema parser\n  \"com.github.andyglow\" %% \"scala-jsonschema-parser\" % <version>             // <-- optional\n)","title":"Modules"},{"location":"/builtin.html","text":"","title":"Built-in support for Core Types ·"},{"location":"/builtin.html#built-in-support-for-core-types","text":"Boolean String Numeric Short Int Char Double Float Long BigInt BigDecimal Date Time java.util.Date java.sql.Timestamp java.time.Instant java.time.LocalDateTime java.sql.Date java.time.LocalDate java.sql.Time java.time.LocalTime Misc java.util.UUID java.net.URL java.net.URI Collections String Map (eg. Map[String, T]) Int Map (eg. Map[Int, T]) Iterable[T] Sum types. Sealed Trait hierarchy of case objects (enum) Sealed Trait hierarchy of case classes (oneof) Product types. Case Classes Value Classes","title":"Built-in support for Core Types"},{"location":"/modules/index.html","text":"","title":"Modules ·"},{"location":"/modules/index.html#modules","text":"","title":"Modules"},{"location":"/modules/json.html","text":"","title":"Json ·"},{"location":"/modules/json.html#json","text":"The library uses its own Json model com.github.andyglow.json.Value to represent Json Schema as JSON document. But project contains additionally several modules which could connect it with library of your choice.\nCurrently supported: - Play Json - Spray Json - Circe - Json4s - uJson","title":"Json"},{"location":"/modules/json.html#play-json","text":"Example:\nimport com.github.andyglow.jsonschema.AsPlay._\nimport json.schema.Version._\n\nimport play.api.libs.json._\n\ncase class Foo(name: String)\n\nval fooSchema: JsValue = Json.schema[Foo].asPlay(Draft04())","title":"Play Json"},{"location":"/modules/json.html#spray-json","text":"Example:\nimport com.github.andyglow.jsonschema.AsSpray._\nimport json.schema.Version._\n\nimport spray.json._\n\ncase class Foo(name: String)\n\nval fooSchema: JsValue = Json.schema[Foo].asSpray(Draft04())","title":"Spray Json"},{"location":"/modules/json.html#circe","text":"Example:\nimport com.github.andyglow.jsonschema.AsCirce._\nimport json.schema.Version._\nimport io.circe._\n\ncase class Foo(name: String)\n\nval fooSchema: Json = Json.schema[Foo].asCirce(Draft04())","title":"Circe"},{"location":"/modules/json.html#json4s","text":"Example:\nimport com.github.andyglow.jsonschema.AsJson4s._\nimport json.schema.Version._\nimport org.json4s.JsonAST._\n\ncase class Foo(name: String)\n\nval fooSchema: JValue = Json.schema[Foo].asJson4s(Draft04())","title":"Json4s"},{"location":"/modules/json.html#ujson","text":"import com.github.andyglow.jsonschema.AsU._\nimport json.schema.Version._\n\ncase class Foo(name: String)\n\nval fooSchema: ujson.Value = Json.schema[Foo].asU(Draft04())","title":"uJson"},{"location":"/modules/cats.html","text":"","title":"Cats ·"},{"location":"/modules/cats.html#cats","text":"","title":"Cats"},{"location":"/modules/refined.html","text":"","title":"Refined ·"},{"location":"/modules/refined.html#refined","text":"","title":"Refined"},{"location":"/modules/joda-time.html","text":"","title":"Joda Time ·"},{"location":"/modules/joda-time.html#joda-time","text":"Joda Time Support allows you to use joda-time classes within your models. Here is an example.\nimport com.github.andyglow.jsonschema.JodaTimeSupport._\nimport org.joda.time._\n\ncase class Event(id: String, timestamp: Instant)\n\nval eventSchema: Schema[Event] = Json.schema[Event]\n\nprintln(JsonFormatter.format(AsValue.schema(eventSchema)))\nresults in\n{\n  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n  \"type\": \"object\",\n  \"additionalProperties\": false,\n  \"properties\": {\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"timestamp\": {\n      \"$ref\": \"#/definitions/org.joda.time.Instant\"\n    }\n  },\n  \"required\": [\n    \"id\",\n    \"timestamp\"\n  ],\n  \"definitions\": {\n    \"org.joda.time.Instant\": {\n      \"type\": \"string\",\n      \"format\": \"date-time\"\n    }\n  }\n}","title":"Joda Time"}]}